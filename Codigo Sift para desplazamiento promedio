import cv2
import numpy as np

# Cargar imágenes antes y después de la deformación
image_before = cv2.imread('a2.png', cv2.IMREAD_GRAYSCALE)
image_after = cv2.imread('a5.png', cv2.IMREAD_GRAYSCALE)

# Inicializa SIFT
sift = cv2.SIFT_create()

# Detecta puntos característicos y descriptores en ambas imágenes
keypoints_before, descriptors_before = sift.detectAndCompute(image_before, None)
keypoints_after, descriptors_after = sift.detectAndCompute(image_after, None)

# Empareja descriptores usando el matcher BF (Brute-Force)
bf = cv2.BFMatcher()
matches = bf.knnMatch(descriptors_before, descriptors_after, k=2)

# Filtra matches usando el ratio de Lowe
good_matches = []
for m, n in matches:
    if m.distance < 0.75 * n.distance:
        good_matches.append(m)

# Dibuja los matches
output_image = cv2.drawMatches(image_before, keypoints_before, image_after, keypoints_after, good_matches, None, flags=2)

# Redimensionar la imagen de salida para que quepa en la ventana
scale_percent = 50  # Porcentaje del tamaño original
width = int(output_image.shape[1] * scale_percent / 100)
height = int(output_image.shape[0] * scale_percent / 100)
dim = (width, height)
resized_output_image = cv2.resize(output_image, dim, interpolation=cv2.INTER_AREA)

# Crear una ventana con un tamaño específico
cv2.namedWindow('Matches', cv2.WINDOW_NORMAL)
cv2.resizeWindow('Matches', width, height)

# Mostrar los matches
cv2.imshow('Matches', resized_output_image)
cv2.waitKey(0)
cv2.destroyAllWindows()

# Calcula desplazamientos
displacements = []
for match in good_matches:
    pt_before = keypoints_before[match.queryIdx].pt
    pt_after = keypoints_after[match.trainIdx].pt
    displacement = np.sqrt((pt_after[0] - pt_before[0])**2 + (pt_after[1] - pt_before[1])**2)
    displacements.append(displacement)

# Calcula la deformación promedio (creo)
average_displacement = np.mean(displacements)
print(f"Desplazamiento promedio: {average_displacement} píxeles")
